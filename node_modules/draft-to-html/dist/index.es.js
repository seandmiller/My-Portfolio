function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var blockTypes = {
  'header-one': 'H1',
  'header-two': 'H2',
  'header-three': 'H3',
  'header-four': 'H4',
  'header-five': 'H5',
  'header-six': 'H6',
  'unordered-list-item': 'LI',
  'ordered-list-item': 'LI',
  'blockquote': 'BLOCKQUOTE',
  'code-block': 'PRE',
  'unstyled': 'P',
  'paragraph': 'P'
};
var inlineStyleTags = {
  'BOLD': 'strong',
  'CODE': 'code',
  'ITALIC': 'em',
  'STRIKETHROUGH': 'strike',
  'UNDERLINE': 'u'
};
var listElements = {
  'unordered-list-item': 'UL',
  'ordered-list-item': 'OL'
};

var parseEntity = function parseEntity(entity) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var customParsed = null;
  var parsed = null;

  if (entity.type.toUpperCase() === 'LINK' && entity.data != null && entity.data.src != null) {
    parsed = document.createElement('A');
    parsed.setAttribute('href', entity.data.src);
  }

  if (options.parseEntity != null) {
    customParsed = options.parseEntity(entity);

    if (customParsed != null) {
      parsed = customParsed;
    }
  }

  return parsed;
};

var parseStyle = function parseStyle(style) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var element = document.createElement(inlineStyleTags[style.toUpperCase()] || 'span');

  if (options.parseStyle != null) {
    element = options.parseStyle(style) || element;
  }

  return element;
};

var getCharacterRanges = function getCharacterRanges(block) {
  return block.characterList.reduce(function (ranges, characterData, index) {
    var lastRange = ranges.slice(-1)[0];

    if (lastRange != null && lastRange.characterData.equals(characterData)) {
      lastRange.length++;
      return ranges;
    } else {
      return _toConsumableArray(ranges).concat([{
        offset: index,
        length: 1,
        characterData: characterData
      }]);
    }
  }, []);
};

var appendTextFragments = function appendTextFragments(block, element, contentState) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var text = block.getText();

  if (block.getType().toLowerCase() === 'atomic') {
    return;
  }

  var characterRanges = getCharacterRanges(block);
  characterRanges.forEach(function (_ref) {
    var offset = _ref.offset,
        length = _ref.length,
        characterData = _ref.characterData;
    var start = offset;
    var end = offset + length;
    var style = characterData.style;
    var entity = characterData.entity != null ? contentState.getEntity(characterData.entity) : null; // console.log('text', text.slice(start, end))
    // console.log('characterData', characterData)
    // console.log('start', start, 'end', end)

    var innerText = document.createTextNode(text.slice(start, end));

    if (style != null && style.size > 0) {
      style.forEach(function (style) {
        var parsedStyle = parseStyle(style);

        if (parsedStyle != null) {
          parsedStyle.appendChild(innerText);
          innerText = parsedStyle;
        }
      });
    }

    if (entity != null) {
      var parsedEntity = parseEntity(entity, options);

      if (parsedEntity != null) {
        parsedEntity.appendChild(innerText);
        innerText = parsedEntity;
      }
    }

    element.appendChild(innerText);
  });
};

var parseBlock = function parseBlock(block, contentState) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var customParsed = null;
  var parsed = {
    nodeName: blockTypes[block.getType()] || 'P'
  };

  if (options.parseBlock != null) {
    customParsed = options.parseBlock(block, contentState);

    if (customParsed != null) {
      parsed = customParsed;
    }
  }

  return parsed;
};

var convertToHtml = function convertToHtml(contentState) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var blocks = contentState.getBlocksAsArray();
  var root = document.createElement('body');
  blocks.forEach(function (block) {
    var _parseBlock = parseBlock(block, contentState, options),
        nodeName = _parseBlock.nodeName,
        attrs = _objectWithoutProperties(_parseBlock, ["nodeName"]);

    var element = document.createElement(nodeName);
    Object.keys(attrs).forEach(function (attr) {
      element.setAttribute(attr, attrs[attr]);
    });
    appendTextFragments(block, element, contentState, options);

    if (block.getType().includes('ordered-list-item')) {
      if (root.lastChild == null || listElements[block.getType()] !== root.lastChild.nodeName) {
        root.appendChild(document.createElement(listElements[block.getType()]));
      }

      root.lastChild.appendChild(element);
    } else {
      root.appendChild(element);
    }
  });
  return root.innerHTML;
};

export default convertToHtml;
//# sourceMappingURL=index.es.js.map
